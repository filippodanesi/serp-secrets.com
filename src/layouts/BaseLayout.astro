---
import BaseHead, { type Props as HeadProps } from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import Nav from '../components/Nav.astro';
import BreadcrumbListStructuredData from '../components/structured-data/BreadcrumbListStructuredData.astro';
import AboutStructuredData from '../components/structured-data/AboutStructuredData.astro';
import ContactPageStructuredData from '../components/structured-data/ContactPageStructuredData.astro';

export type Props = HeadProps & { 
    showHeader?: boolean;
    metaTags?: {
        title?: string;
        description?: string;
        robots?: string;
    };
    breadcrumb?: {
        items?: Array<{ name: string; item: string }>;
        currentPageName?: string;
    };
    headerProps?: {
        subtitle?: string;
        totalPosts?: number;
    };
};

const { showHeader = true, metaTags, breadcrumb, headerProps, ...head } = Astro.props;

const pathname = Astro.url.pathname;
const isAboutPage = pathname === '/about' || pathname === '/about/';
const isContactPage = pathname === '/contact' || pathname === '/contact/';

const headProps = {
    ...head,
    ...metaTags
};
---

<!doctype html>
<html lang="en" class="antialiased break-words">
    <head>
        <BaseHead {...headProps} />
        <link
            rel="alternate"
            type="application/rss+xml"
            title="Serp Secrets RSS Feed"
            href={new URL("rss.xml", Astro.site)}
        />
        <BreadcrumbListStructuredData {...breadcrumb} />
        {isAboutPage && <AboutStructuredData />}
        {isContactPage && <ContactPageStructuredData />}
        <slot name="structured-data" />
        
        <!-- Vercel Analytics with IP blocking -->
        <script is:inline>
            // Check if IP is excluded from analytics BEFORE loading scripts
            (async function() {
                // Check localStorage cache first (expires after 1 hour)
                const cached = localStorage.getItem('analytics_check');
                let shouldBlock = false;
                
                if (cached) {
                    try {
                        const { excluded, timestamp } = JSON.parse(cached);
                        const oneHour = 60 * 60 * 1000;
                        if (Date.now() - timestamp < oneHour) {
                            shouldBlock = excluded;
                            if (shouldBlock) {
                                console.log('[Analytics] IP excluded (cached)');
                                return; // Don't load analytics
                            }
                        }
                    } catch (e) {}
                }
                
                // Fetch fresh data from API
                try {
                    const response = await fetch('/api/check-ip');
                    const data = await response.json();
                    
                    // Cache the result
                    localStorage.setItem('analytics_check', JSON.stringify({
                        excluded: data.excluded,
                        timestamp: Date.now()
                    }));
                    
                    shouldBlock = data.excluded;
                    
                    if (data.excluded) {
                        console.log('[Analytics] IP excluded from tracking:', data.ip);
                        return; // Don't load analytics
                    }
                } catch (e) {
                    console.error('[Analytics] Error checking IP:', e);
                }
                
                // Only load Analytics if not blocked
                if (!shouldBlock) {
                    // Load Vercel Analytics script
                    const script = document.createElement('script');
                    script.src = '/_vercel/insights/script.js';
                    script.defer = true;
                    document.head.appendChild(script);
                }
            })();
        </script>
        <script>
            if (localStorage.theme === 'dark') {
                document.documentElement.classList.add('dark');
                document.documentElement.classList.add('cc--darkmode');
            }
        </script>
    </head>
    <body class="bg-main text-main">
        <div class="flex flex-col min-h-screen px-4 md:px-6 lg:px-8">
            <Nav />
            {showHeader && <Header {...headerProps} />}
            <main class="grow w-full max-w-3xl mx-auto">
                <slot />
            </main>
            <Footer />
        </div>
    </body>
</html>