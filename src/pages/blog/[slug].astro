---
import BaseLayout from '../../layouts/BaseLayout.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { slugify } from '../../utils/common-utils';
import BlogPostingStructuredData from '../../components/structured-data/BlogPostingStructuredData.astro';
import { 
    getAllUnifiedPosts, 
    getUnifiedPostBySlug, 
    getAdjacentPosts,
    isWordPressPost,
    decodeHtmlEntities,
    type UnifiedPost 
} from '../../utils/content-utils';
import AuthorBlock from '../../components/AuthorBlock.astro';

export const prerender = false;

export async function getStaticPaths() {
    const posts = await getAllUnifiedPosts();
    return posts.map((post) => ({
        params: { slug: post.slug },
        props: { post }
    }));
}

type Props = { post?: UnifiedPost };

const { slug } = Astro.params;

if (!slug) {
    return new Response(null, { status: 404 });
}

let post = Astro.props.post;
if (!post) {
    try {
        post = await getUnifiedPostBySlug(slug);
    } catch (error) {
        console.error('Error fetching post:', error);
        return new Response(null, { status: 404 });
    }
}

if (!post) {
    return new Response(null, { status: 404 });
}

const { title, publishDate, updatedDate, excerpt, tags = [], seo, image } = post.data;

const { nextPost, prevPost } = await getAdjacentPosts(post.slug);

let Content;
if (isWordPressPost(post)) {
    Content = () => ({ $$render: () => post.body });
} else {
    const { Content: AstroContent } = await post.render();
    Content = AstroContent;
}

const breadcrumbItems = [
    {
        name: 'Archive',
        item: `${Astro.site}blog/`
    }
];

if (tags.length > 0) {
    const categorySlug = slugify(tags[0]);
    breadcrumbItems.push({
        name: tags[0],
        item: `${Astro.site}categories/${categorySlug}/`
    });
}
---

<BaseLayout 
    title={seo?.title ?? title} 
    description={seo?.description ?? excerpt} 
    image={seo?.image ?? image} 
    pageType="article" 
    showHeader={false}
    breadcrumb={{
        items: breadcrumbItems,
        currentPageName: title
    }}
>
    <BlogPostingStructuredData slot="structured-data" {...post.data} body={post.body} />
    
    <article class="mb-12">
        <header class="mb-8">
            <h1 class="text-2xl sm:text-3xl font-semibold text-main mb-4 leading-tight tracking-tight">
                {decodeHtmlEntities(title)}
            </h1>

            <div class="flex flex-wrap items-center gap-x-6 gap-y-4 text-xs text-muted font-mono mb-6">
                <time>
                    {updatedDate ? 'Updated on ' : ''}<FormattedDate date={updatedDate || publishDate} />
                </time>
                
                {tags.length > 0 && (
                    <div class="hidden sm:flex items-center gap-3">
                        <span>/</span>
                        <a href={`/categories/${slugify(tags[0])}/`} class="text-muted hover:text-foreground transition-colors">
                            {tags[0]}
                        </a>
                    </div>
                )}
                
                <AuthorBlock post={post} display="byline" />
            </div>

            {image && (
                <div class="mb-8 aspect-[3/2] overflow-hidden rounded-lg">
                    <img
                        src={image.src}
                        alt={image.alt}
                        class="w-full h-full object-cover"
                        loading="eager"
                        width="1200"
                        height="800"
                    />
                </div>
            )}
        </header>

        <div class={`prose prose-dante prose-sm max-w-none ${isWordPressPost(post) ? 'wordpress-content' : ''}`}>
            {isWordPressPost(post) ? (
                <div set:html={post.body} />
            ) : (
                <Content />
            )}
        </div>

        <AuthorBlock post={post} display="full" />
        
    </article>

    {(prevPost || nextPost) && (
        <nav class="mt-12 pt-6 border-t border-main">
            <div class="flex flex-col gap-4">
                {nextPost && (
                    <div>
                        <p class="text-xs text-muted font-mono uppercase tracking-wider mb-2">Next</p>
                        <a 
                            href={`/blog/${nextPost.slug}/`}
                            class="text-base font-medium text-main hover:text-accent transition-colors"
                        >
                            {decodeHtmlEntities(nextPost.data.title)}
                        </a>
                    </div>
                )}
                {prevPost && (
                    <div>
                        <p class="text-xs text-muted font-mono uppercase tracking-wider mb-2">Previous</p>
                        <a 
                            href={`/blog/${prevPost.slug}/`}
                            class="text-base font-medium text-main hover:text-accent transition-colors"
                        >
                            {decodeHtmlEntities(prevPost.data.title)}
                        </a>
                    </div>
                )}
            </div>
        </nav>
    )}
</BaseLayout>

<style>
    .wordpress-content img {
        border-radius: calc(var(--radius));
        margin: 2rem 0;
        width: 100%;
        height: auto;
        aspect-ratio: 3/2;
        object-fit: cover;
    }
    
    .wordpress-content blockquote {
        border-left: 4px solid hsl(var(--border));
        padding-left: 1.5rem;
        margin: 2rem 0;
        font-style: italic;
        color: hsl(var(--muted-foreground));
    }
    
    .wordpress-content pre {
        background-color: hsl(var(--muted));
        border: 1px solid hsl(var(--border));
        border-radius: calc(var(--radius));
        padding: 1rem;
        overflow-x: auto;
    }
    
    .wordpress-content code {
        background-color: hsl(var(--muted));
        padding: 0.25rem 0.5rem;
        border-radius: calc(var(--radius) - 2px);
        font-size: 0.875rem;
    }
    
    .wordpress-content pre code {
        background: none;
        padding: 0;
    }
</style>
