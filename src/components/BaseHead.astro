---
import siteConfig from '@/data/site-config';
import '../styles/global.css';

export type Props = {
    title?: string;
    description?: string;
    image?: { src: string; alt?: string };
    pageType?: 'website' | 'article';
    isHome?: boolean;
    robots?: string;
};

const { 
    description = '', 
    image = siteConfig.image, 
    pageType = 'website',
    isHome = false,
    robots = 'max-image-preview:large'
} = Astro.props;

const title = isHome 
    ? Astro.props.title 
    : [Astro.props.title, siteConfig.title].filter(Boolean).join(' \\ ');

const resolvedImage = image?.src
    ? {
          src: new URL(image.src, Astro.site).toString(),
          alt: image.alt
      }
    : undefined;

const canonicalURL = new URL(Astro.request.url, Astro.site);

/**
 * Enforce standard canonical URL formatting across the site.
 * - Removes the trailing slash if there are query parameters.
 * - Adds a trailing slash if there are no query parameters.
 */
function formatCanonicalURL(url: string | URL) {
    let path = url.toString();
    const hasQueryParams = path.includes('?');
    if (hasQueryParams) {
        path = path.replace(/\/$/, '');
    } else {
        path = path.endsWith('/') ? path : `${path}/`;
    }
    return path;
}
---

<!-- High Priority Global Metadata -->
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content={robots} />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>{title}</title>
<meta name="generator" content={Astro.generator} />
<meta name="author" content="Filippo Danesi">

<!-- Low Priority Global Metadata -->
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap.xml" />

<!-- Page Metadata -->
<link rel="canonical" href={formatCanonicalURL(canonicalURL)} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={pageType} />
<meta property="og:url" content={formatCanonicalURL(canonicalURL)} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="article:author" content="Filippo Danesi">
{resolvedImage?.src && <meta property="og:image" content={resolvedImage.src} />}
{resolvedImage?.alt && <meta property="og:image:alt" content={resolvedImage.alt} />}

<!-- X/Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={formatCanonicalURL(canonicalURL)} />
<meta name="twitter:creator" content="@filippodanesi">
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
{resolvedImage?.src && <meta property="twitter:image" content={resolvedImage.src} />}
{resolvedImage?.alt && <meta name="twitter:image:alt" content={resolvedImage?.alt} />}

<script defer data-domain="serp-secrets.com" data-api="https://aged-bird-34c9.filippo-danesi-007.workers.dev/stats/event" src="https://aged-bird-34c9.filippo-danesi-007.workers.dev/stats/script.outbound-links.js"></script>