---
// src/components/StyledLazyTweet.astro
// Minimalist tweet component that matches the SVG design style

interface Props {
  url: string;
  theme?: 'light' | 'dark';
  align?: 'center' | 'left' | 'right';
  hideThread?: boolean;
  caption?: string;
}

const { 
  url, 
  theme = 'light', 
  align = 'center',
  hideThread = false,
  caption
} = Astro.props;

// Extract tweet ID from URL
const getTweetId = (tweetUrl) => {
  const matches = tweetUrl.match(/twitter\.com\/\w+\/status\/(\d+)/);
  return matches ? matches[1] : '';
};

const tweetId = getTweetId(url);
---

<figure class={`tweet-container tweet-align-${align}`}>
  <div class="tweet-card" data-tweet-url={url} data-theme={theme} data-hide-thread={hideThread ? "true" : "false"}>
    <div class="tweet-header">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="tweet-logo">
        <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
      </svg>
      <a href={url} target="_blank" rel="noopener noreferrer" class="view-on-twitter">
        View on Twitter
      </a>
    </div>
    <div class="tweet-placeholder">
      <div class="tweet-loading-text">Loading tweet...</div>
      <a href={url} target="_blank" rel="noopener noreferrer">Tweet ID: {tweetId}</a>
    </div>
  </div>
  {caption && <figcaption>{caption}</figcaption>}
</figure>

<script>
  // Lazy loading using Intersection Observer
  document.addEventListener('DOMContentLoaded', () => {
    const tweetCards = document.querySelectorAll('.tweet-card');
    
    // Only load Twitter script if there are tweets on the page
    if (tweetCards.length === 0) return;
    
    // Function to load Twitter script
    let twitterScriptLoaded = false;
    const loadTwitterScript = () => {
      if (twitterScriptLoaded) return Promise.resolve();
      
      return new Promise((resolve) => {
        const script = document.createElement('script');
        script.src = 'https://platform.twitter.com/widgets.js';
        script.async = true;
        script.charset = 'utf-8';
        script.onload = () => {
          twitterScriptLoaded = true;
          resolve();
        };
        document.body.appendChild(script);
      });
    };
    
    // Transform div into Twitter embed
    const renderTweet = (element) => {
      const url = element.dataset.tweetUrl;
      const theme = element.dataset.theme;
      const hideThread = element.dataset.hideThread === 'true';
      
      // Create blockquote with custom styling
      const blockquote = document.createElement('blockquote');
      blockquote.className = 'twitter-tweet';
      
      if (theme === 'dark') {
        blockquote.setAttribute('data-theme', 'dark');
      }
      
      if (hideThread) {
        blockquote.setAttribute('data-hide-thread', 'true');
      }
      
      blockquote.setAttribute('data-dnt', 'true'); // Do Not Track for privacy
      
      const link = document.createElement('a');
      link.href = url;
      blockquote.appendChild(link);
      
      // Replace placeholder with blockquote
      element.querySelector('.tweet-placeholder').innerHTML = '';
      element.querySelector('.tweet-placeholder').appendChild(blockquote);
      
      // Process with Twitter API
      if (window.twttr && window.twttr.widgets) {
        window.twttr.widgets.load(element);
      }
    };
    
    // Use Intersection Observer for lazy loading
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          loadTwitterScript().then(() => {
            renderTweet(entry.target);
            observer.unobserve(entry.target);
          });
        }
      });
    }, { rootMargin: '200px' });
    
    // Observe all embeds
    tweetCards.forEach(card => {
      observer.observe(card);
    });
  });
</script>

<style>
  .tweet-container {
    margin: 2rem 0;
    width: 100%;
    font-family: system-ui, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;
  }
  
  .tweet-align-center {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .tweet-align-left {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }
  
  .tweet-align-right {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
  }
  
  .tweet-card {
    min-height: 120px;
    max-width: 550px;
    width: 100%;
    background-color: rgb(242, 241, 236);
    border: 1px solid rgb(var(--color-border-main) / .15);
    border-radius: 4px;
    padding: 16px;
    transition: box-shadow 0.2s ease;
  }
  
  .tweet-card:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .tweet-header {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
  }
  
  .tweet-logo {
    color: rgb(23, 23, 23);
    margin-right: 12px;
  }
  
  .view-on-twitter {
    font-size: 14px;
    color: rgb(23, 23, 23);
    text-decoration: none;
    font-weight: 500;
  }
  
  .view-on-twitter:hover {
    text-decoration: underline;
  }
  
  .tweet-placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 20px;
    background-color: rgb(var(--color-bg-muted));
    border-radius: 4px;
    min-height: 80px;
  }
  
  .tweet-loading-text {
    font-size: 16px;
    color: rgb(23, 23, 23);
    opacity: 0.7;
    margin-bottom: 8px;
  }
  
  figcaption {
    margin-top: 0.75rem;
    font-size: 14px;
    color: rgb(23, 23, 23);
    opacity: 0.7;
    text-align: center;
  }
  
  /* Styles for Twitter embed once loaded */
  :global(.twitter-tweet) {
    margin: 0 !important;
  }
</style>