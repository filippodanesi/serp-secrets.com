---
// src/components/StyledLazyTweet.astro
// Minimalist tweet component without most styles

interface Props {
  url: string;
  theme?: 'light' | 'dark';
  hideThread?: boolean;
  caption?: string;
}

const { 
  url, 
  theme = 'light',
  hideThread = false,
  caption
} = Astro.props;

// Extract tweet ID from URL
const getTweetId = (tweetUrl) => {
  const matches = tweetUrl.match(/twitter\.com\/\w+\/status\/(\d+)/);
  return matches ? matches[1] : '';
};

const tweetId = getTweetId(url);
---

<figure class="tweet-container">
  <div class="tweet-card" data-tweet-url={url} data-theme={theme} data-hide-thread={hideThread ? "true" : "false"}>
    <div class="tweet-header">
      <a href={url} target="_blank" rel="noopener noreferrer">
        View on Twitter
      </a>
    </div>
    <div class="tweet-placeholder">
      <div>Loading tweet...</div>
      <a href={url} target="_blank" rel="noopener noreferrer">Tweet ID: {tweetId}</a>
    </div>
  </div>
  {caption && <figcaption>{caption}</figcaption>}
</figure>

<script>
  // Lazy loading using Intersection Observer
  document.addEventListener('DOMContentLoaded', () => {
    const tweetCards = document.querySelectorAll('.tweet-card');
    
    // Only load Twitter script if there are tweets on the page
    if (tweetCards.length === 0) return;
    
    // Function to load Twitter script
    let twitterScriptLoaded = false;
    const loadTwitterScript = () => {
      if (twitterScriptLoaded) return Promise.resolve();
      
      return new Promise((resolve) => {
        const script = document.createElement('script');
        script.src = 'https://platform.twitter.com/widgets.js';
        script.async = true;
        script.charset = 'utf-8';
        script.onload = () => {
          twitterScriptLoaded = true;
          resolve();
        };
        document.body.appendChild(script);
      });
    };
    
    // Transform div into Twitter embed
    const renderTweet = (element) => {
      const url = element.dataset.tweetUrl;
      const theme = element.dataset.theme;
      const hideThread = element.dataset.hideThread === 'true';
      
      // Create blockquote with custom styling
      const blockquote = document.createElement('blockquote');
      blockquote.className = 'twitter-tweet';
      
      if (theme === 'dark') {
        blockquote.setAttribute('data-theme', 'dark');
      }
      
      if (hideThread) {
        blockquote.setAttribute('data-hide-thread', 'true');
      }
      
      blockquote.setAttribute('data-dnt', 'true'); // Do Not Track for privacy
      
      const link = document.createElement('a');
      link.href = url;
      blockquote.appendChild(link);
      
      // Replace placeholder with blockquote
      element.querySelector('.tweet-placeholder').innerHTML = '';
      element.querySelector('.tweet-placeholder').appendChild(blockquote);
      
      // Process with Twitter API
      if (window.twttr && window.twttr.widgets) {
        window.twttr.widgets.load(element);
      }
    };
    
    // Use Intersection Observer for lazy loading
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          loadTwitterScript().then(() => {
            renderTweet(entry.target);
            observer.unobserve(entry.target);
          });
        }
      });
    }, { rootMargin: '200px' });
    
    // Observe all embeds
    tweetCards.forEach(card => {
      observer.observe(card);
    });
  });
</script>

<style>
  .tweet-container {
    margin: 2rem 0;
    width: 100%;
  }
  
  .tweet-placeholder {
    aspect-ratio: 16 / 9;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border: 1px solid rgb(var(--color-border-main) / .15);
    border-radius: 4px;
    padding: 16px;
    max-width: 550px;
  }
</style>