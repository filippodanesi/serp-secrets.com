---
// TableOfContents.astro
export interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const { headings } = Astro.props;

// Filter headings to include only h2 and h3
const filteredHeadings = headings.filter(heading => heading.depth === 2 || heading.depth === 3);

// Determine if we should show the TOC
const showToc = filteredHeadings.length > 0;
---

{showToc && (
  <aside class="toc-container hidden lg:block">
    <div class="sticky top-24 max-h-[calc(100vh-8rem)] overflow-y-auto pl-8 text-sm">
      <div class="flex items-center justify-between mb-4">
        <p class="text-base font-serif italic text-[rgb(var(--color-text-main))]">Indice</p>
        
        <span id="reading-position" class="text-xs text-[rgb(var(--color-text-muted)_/_0.6)]">
          <span id="current-section">0</span>/<span id="total-sections">{filteredHeadings.length}</span>
        </span>
      </div>
      
      <nav class="toc">
        <ul class="space-y-2">
          {filteredHeadings.map((heading, index) => (
            <li class={`toc-item ${heading.depth === 3 ? 'ml-4' : ''}`}>
              <a 
                href={`#${heading.slug}`}
                class={`
                  block border-l-2 pl-2 py-1 transition-colors hover:text-[rgb(var(--color-text-main))]
                  ${heading.depth === 2 
                    ? 'border-[rgb(var(--color-text-muted)_/_0.3)]' 
                    : 'border-[rgb(var(--color-text-muted)_/_0.15)]'
                  }
                  text-[rgb(var(--color-text-muted)_/_0.6)]
                  hover:border-[rgb(var(--color-text-muted))]
                `}
                data-depth={heading.depth}
                data-index={index + 1}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </nav>
      
      <div class="mt-8 pt-4 border-t border-[rgb(var(--color-text-muted)_/_0.1)]">
        <a 
          href="#top" 
          id="back-to-top"
          class="flex items-center justify-center w-full text-xs text-[rgb(var(--color-text-muted)_/_0.6)] hover:text-[rgb(var(--color-text-main))] transition-colors"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1">
            <path fill-rule="evenodd" d="M10 17a.75.75 0 01-.75-.75V5.612L5.29 9.77a.75.75 0 01-1.08-1.04l5.25-5.5a.75.75 0 011.08 0l5.25 5.5a.75.75 0 11-1.08 1.04l-3.96-4.158V16.25A.75.75 0 0110 17z" clip-rule="evenodd" />
          </svg>
          Back to top
        </a>
      </div>
    </div>
  </aside>
)}

<script>
  // Highlight current section in TOC based on scroll position and update counter
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute('id');
          if (id) {
            const tocItem = document.querySelector(`.toc a[href="#${id}"]`);
            if (tocItem && entry.intersectionRatio > 0) {
              // Remove active class from all TOC items
              document.querySelectorAll('.toc a').forEach((link) => {
                link.classList.remove('active');
              });
              
              // Add active class to the current TOC item
              tocItem.classList.add('active');
              
              // Update current section counter
              const currentSectionElement = document.getElementById('current-section');
              if (currentSectionElement) {
                currentSectionElement.textContent = tocItem.getAttribute('data-index') || '0';
              }
            }
          }
        });
      },
      { rootMargin: '-100px 0px -66% 0px' }
    );

    // Track all headers that have an id applied
    document.querySelectorAll('h2[id], h3[id]').forEach((heading) => {
      observer.observe(heading);
    });
    
    // Smooth scroll for TOC links and back to top button
    document.querySelectorAll('.toc a, #back-to-top').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href');
        
        // Don't scroll for external links
        if (targetId?.startsWith('#')) {
          const targetElement = document.querySelector(targetId);
          if (targetElement) {
            // Scroll with offset to account for fixed header
            const offset = 100;
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - offset;
            
            window.scrollTo({
              top: targetId === '#top' ? 0 : offsetPosition,
              behavior: 'smooth'
            });
          }
        }
      });
    });
  });
</script>

<style>
  .toc-container {
    width: 220px;
  }

  .toc a.active {
    @apply text-[rgb(var(--color-text-main))] border-[rgb(var(--color-text-main))];
    font-weight: 500;
  }

  /* Per garantire che anche su hover rimanga attivo */
  .toc a.active:hover {
    @apply text-[rgb(var(--color-text-main))] border-[rgb(var(--color-text-main))];
  }

  /* Ensure smooth transitions */
  .toc a {
    transition: color 0.2s ease, border-color 0.2s ease;
  }

  /* Hide TOC when printing */
  @media print {
    .toc-container {
      display: none;
    }
  }
</style>