---
import OpenAI from 'openai';
import fs from 'fs/promises';
import path from 'path';
import SearchIcon from '../icons/Search.astro';

export interface Props {
  content: string;
  title: string;
  cacheKey?: string;
}

const { content, title, cacheKey = "" } = Astro.props;

// Resto del codice TypeScript rimane invariato...
// Function to generate summary, rateLimiter, caching logic, etc.
---

<div class="ai-summary">
  <button
    id="ai-summary-toggle"
    class="ai-summary-header w-full flex items-center justify-between cursor-pointer"
    aria-expanded="false"
    aria-controls="ai-summary-content"
  >
    <div class="flex items-center">
      <SearchIcon class="ai-icon" />
      <span>Article Summary</span>
    </div>
    <span class="toggle-icon ml-2 opacity-60 text-sm">
      <span class="expand-text">Expand</span>
      <span class="collapse-text hidden">Collapse</span>
    </span>
  </button>
  <div 
    id="ai-summary-content" 
    class="ai-summary-content hidden"
  >
    {isLoading ? (
      <div class="loading-indicator">
        <span class="dot"></span>
        <span class="dot"></span>
        <span class="dot"></span>
        <p>Generating summary...</p>
      </div>
    ) : (
      <p>{displaySummary}</p>
    )}
  </div>
</div>

<script>
  // Add the toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('ai-summary-toggle');
    const summaryContent = document.getElementById('ai-summary-content');
    const expandText = document.querySelector('.expand-text');
    const collapseText = document.querySelector('.collapse-text');
    
    if (toggleButton && summaryContent && expandText && collapseText) {
      toggleButton.addEventListener('click', () => {
        const isExpanded = toggleButton.getAttribute('aria-expanded') === 'true';
        
        // Toggle the aria-expanded attribute
        toggleButton.setAttribute('aria-expanded', isExpanded ? 'false' : 'true');
        
        // Toggle the visibility
        if (isExpanded) {
          summaryContent.classList.add('hidden');
          expandText.classList.remove('hidden');
          collapseText.classList.add('hidden');
        } else {
          summaryContent.classList.remove('hidden');
          expandText.classList.add('hidden');
          collapseText.classList.remove('hidden');
        }
      });
    }
  });
</script>

<style>
  .ai-summary {
    margin-bottom: 1.5rem; /* Ridotto da 2rem */
  }
  
  .ai-summary-header {
    padding: 0.5rem 0; /* Ridotto da 0.75rem 0 */
    border-bottom: 1px solid rgb(var(--color-text-muted) / 0.1);
  }
  
  .ai-summary-content {
    padding: 0.5rem 0 0; /* Ridotto da 1rem 0 0 */
  }
  
  .ai-icon {
    margin-right: 0.4rem; /* Ridotto da 0.5rem */
  }
  
  .loading-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.3rem; /* Ridotto da 0.5rem */
    padding: 0.6rem 0; /* Ridotto da 1rem 0 */
  }
  
  .loading-indicator .dot {
    display: inline-block;
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: rgb(var(--color-text-muted) / 0.6);
    animation: dotPulse 1.5s infinite ease-in-out;
  }
  
  .loading-indicator .dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .loading-indicator .dot:nth-child(3) {
    animation-delay: 0.4s;
  }
  
  @keyframes dotPulse {
    0%, 80%, 100% { 
      transform: scale(0.8);
      opacity: 0.5;
    }
    40% { 
      transform: scale(1);
      opacity: 1;
    }
  }
</style>