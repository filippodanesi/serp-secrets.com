---
import OpenAI from 'openai';
import fs from 'fs/promises';
import path from 'path';

export interface Props {
  content: string;
  title: string;
  cacheKey?: string;
}

const { content, title, cacheKey = "" } = Astro.props;

// Function to generate summary
async function generateSummary(text: string, articleTitle: string): Promise<string | null> {
  try {
    // Initialize the OpenAI client with the new API structure
    const openai = new OpenAI({
      apiKey: import.meta.env.OPENAI_API_KEY,
      dangerouslyAllowBrowser: false
    });

    const prompt = `Create a brief summary of the article titled "${articleTitle}" as a SINGLE PARAGRAPH of approximately 200 characters. The summary must use complete sentences and end properly without truncation. DO NOT use any formatting:
    
    ${text.substring(0, 4000)}`;

    // Use the new chat completions API
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "You are an assistant that creates concise summaries of blog articles. Your task is to create a single paragraph summary of approximately 200 characters. Use complete sentences and ensure the summary ends naturally. Never truncate with '...'. DO NOT use any formatting."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.5,
      max_tokens: 4096,
    });

    // Get response content and thoroughly clean it
    let summaryText = response.choices[0]?.message.content?.trim() || "";
    
    // Cleaning logic
    summaryText = summaryText.replace(/<[^>]*>/g, '');
    summaryText = summaryText.replace(/\*\*/g, '');
    summaryText = summaryText.replace(/\*/g, '');
    summaryText = summaryText.replace(/\[|\]/g, '');
    summaryText = summaryText.replace(/^\s*[\-\*â€¢]\s*/gm, '');
    summaryText = summaryText.replace(/^\s*\d+\.\s*/gm, '');
    summaryText = summaryText.replace(/\s+/g, ' ').trim();
    
    // Format checking and processing logic omitted for brevity
    
    return summaryText || null;
  } catch (error) {
    console.error("Error generating summary:", error);
    return null;
  }
}

// Rate limiter
const rateLimiter = (() => {
  let lastCallTime = 0;
  const minDelay = 1000;

  return async () => {
    const now = Date.now();
    const elapsed = now - lastCallTime;
    
    if (elapsed < minDelay) {
      await new Promise(resolve => setTimeout(resolve, minDelay - elapsed));
    }
    
    lastCallTime = Date.now();
  };
})();

// Implementation with loading state
let isLoading = true;
let summary: string | null = null;

// Cache handling logic omitted for brevity
const cacheDir = '.astro/summaries';

if (cacheKey) {
  try {
    await fs.mkdir(cacheDir, { recursive: true });
    const cacheFile = path.join(cacheDir, `${cacheKey}.json`);
    
    try {
      const cacheData = await fs.readFile(cacheFile, 'utf-8');
      const parsedData = JSON.parse(cacheData);
      
      if (parsedData.summary) {
        summary = parsedData.summary;
        isLoading = false;
      } else {
        await rateLimiter();
        summary = await generateSummary(content, title);
        isLoading = false;
        
        if (summary) {
          await fs.writeFile(
            cacheFile, 
            JSON.stringify({ summary, timestamp: Date.now() }),
            'utf-8'
          );
        }
      }
    } catch (error) {
      await rateLimiter();
      summary = await generateSummary(content, title);
      isLoading = false;
      
      if (summary) {
        await fs.writeFile(
          cacheFile, 
          JSON.stringify({ summary, timestamp: Date.now() }),
          'utf-8'
        );
      }
    }
  } catch (error) {
    console.error("Error with caching:", error);
    await rateLimiter();
    summary = await generateSummary(content, title);
    isLoading = false;
  }
} else {
  await rateLimiter();
  summary = await generateSummary(content, title);
  isLoading = false;
}

const displaySummary = summary || "Summary generation in progress... Reload the page to try again.";
---

<div class="ai-summary">
  <button
    id="ai-summary-toggle"
    class="ai-summary-header w-full flex items-center justify-between cursor-pointer"
    aria-expanded="false"
    aria-controls="ai-summary-content"
  >
    <div class="flex items-center">
      <!-- Larger triangle icon -->
      <svg class="arrow-icon" width="12" height="12" viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
        <path d="M3 2L7 5L3 8V2Z" fill="currentColor"/>
      </svg>
      <span class="text-xs sm:text-sm">Article Summary</span>
    </div>
  </button>
  <div 
    id="ai-summary-content" 
    class="ai-summary-content hidden"
  >
    {isLoading ? (
      <div class="loading-indicator">
        <span class="dot"></span>
        <span class="dot"></span>
        <span class="dot"></span>
        <p class="text-xs sm:text-sm">Generating summary...</p>
      </div>
    ) : (
      <p class="text-xs sm:text-sm">{displaySummary}</p>
    )}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('ai-summary-toggle');
    const summaryContent = document.getElementById('ai-summary-content');
    const arrowIcon = document.querySelector('.arrow-icon');
    
    if (toggleButton && summaryContent && arrowIcon) {
      toggleButton.addEventListener('click', () => {
        const isExpanded = toggleButton.getAttribute('aria-expanded') === 'true';
        
        toggleButton.setAttribute('aria-expanded', isExpanded ? 'false' : 'true');
        
        if (isExpanded) {
          summaryContent.classList.add('hidden');
          arrowIcon.classList.remove('rotated');
        } else {
          summaryContent.classList.remove('hidden');
          arrowIcon.classList.add('rotated');
        }
      });
    }
  });
</script>

<style>
  .ai-summary {
    /* Margin bottom removed */
  }
  
  .ai-summary-header {
    padding: 0.3rem 0;
  }
  
  .ai-summary-content {
    padding: 0.3rem 0 0;
  }
  
  .arrow-icon {
    margin-right: 0.3rem;
    transition: transform 0.3s ease;
  }
  
  .arrow-icon.rotated {
    transform: rotate(90deg);
  }
  
  .loading-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.2rem;
    padding: 0.4rem 0;
  }
  
  .loading-indicator .dot {
    display: inline-block;
    width: 5px;
    height: 5px;
    border-radius: 50%;
    background-color: rgb(var(--color-text-muted) / 0.6);
    animation: dotPulse 1.5s infinite ease-in-out;
  }
  
  .loading-indicator .dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .loading-indicator .dot:nth-child(3) {
    animation-delay: 0.4s;
  }
  
  @keyframes dotPulse {
    0%, 80%, 100% { 
      transform: scale(0.8);
      opacity: 0.5;
    }
    40% { 
      transform: scale(1);
      opacity: 1;
    }
  }
</style>